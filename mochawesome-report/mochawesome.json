{
  "stats": {
    "suites": 7,
    "tests": 22,
    "passes": 22,
    "pending": 0,
    "failures": 0,
    "start": "2018-10-30T13:38:14.396Z",
    "end": "2018-10-30T13:38:14.421Z",
    "duration": 25,
    "testsRegistered": 22,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "7b7aa82d-a607-4774-aaa9-865364d1f140",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "6177cc41-00a4-419b-be2e-7ffdde4fdb5b",
        "title": "两数之和测试",
        "fullFile": "D:\\Practice\\happy-leetcode\\test\\a1-two-sum.test.js",
        "file": "\\test\\a1-two-sum.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "输入[5, 6, 13, 15]， 17，应该得到[]",
            "fullTitle": "两数之和测试 输入[5, 6, 13, 15]， 17，应该得到[]",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input = [5, 6, 13, 15];\nconst result = twoSum(input, 17);\nshould(result).be.eql([]);",
            "err": {},
            "isRoot": false,
            "uuid": "1c06d0e4-1c12-40ab-8600-a9bd87395dab",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入[5, 6, 13, 15]， 19，应该得到[1, 2]",
            "fullTitle": "两数之和测试 输入[5, 6, 13, 15]， 19，应该得到[1, 2]",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input = [5, 6, 13, 15];\nconst result = twoSum(input, 19);\nshould(result).be.eql([1, 2]);",
            "err": {},
            "isRoot": false,
            "uuid": "5512a820-9f1b-4869-b706-63917fb55f09",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "1c06d0e4-1c12-40ab-8600-a9bd87395dab",
          "5512a820-9f1b-4869-b706-63917fb55f09"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ab15701c-c1fa-4df8-8e7d-62af07225625",
        "title": "罗马数字转换为整数",
        "fullFile": "D:\\Practice\\happy-leetcode\\test\\a13-roman-to-integer.test.js",
        "file": "\\test\\a13-roman-to-integer.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "输入III，应该得到3",
            "fullTitle": "罗马数字转换为整数 输入III，应该得到3",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = romanToInt('III');\nshould(result).be.equal(3);",
            "err": {},
            "isRoot": false,
            "uuid": "0230d7cc-09c8-4df7-bc08-99f1a7e7ff06",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入IV，应该得到4",
            "fullTitle": "罗马数字转换为整数 输入IV，应该得到4",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = romanToInt('IV');\nshould(result).be.equal(4);",
            "err": {},
            "isRoot": false,
            "uuid": "074f87a0-043c-4b32-b680-593d4619831b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入IX，应该得到9",
            "fullTitle": "罗马数字转换为整数 输入IX，应该得到9",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = romanToInt('IX');\nshould(result).be.equal(9);",
            "err": {},
            "isRoot": false,
            "uuid": "1514f6d7-ce27-4f6a-9684-ada012fc6842",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入LVIII，应该得到58",
            "fullTitle": "罗马数字转换为整数 输入LVIII，应该得到58",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = romanToInt('LVIII');\nshould(result).be.equal(58);",
            "err": {},
            "isRoot": false,
            "uuid": "9186edbb-9a89-4c36-bd68-fddb044a3d22",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入MCMXCIV，应该得到1994",
            "fullTitle": "罗马数字转换为整数 输入MCMXCIV，应该得到1994",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = romanToInt('MCMXCIV');\nshould(result).be.equal(1994);",
            "err": {},
            "isRoot": false,
            "uuid": "86999ed9-8e5a-4bcd-ba9c-292964ac78cb",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "0230d7cc-09c8-4df7-bc08-99f1a7e7ff06",
          "074f87a0-043c-4b32-b680-593d4619831b",
          "1514f6d7-ce27-4f6a-9684-ada012fc6842",
          "9186edbb-9a89-4c36-bd68-fddb044a3d22",
          "86999ed9-8e5a-4bcd-ba9c-292964ac78cb"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9df4dd92-0c31-45f3-9e19-d19df6b94009",
        "title": "寻找最长公共前缀",
        "fullFile": "D:\\Practice\\happy-leetcode\\test\\a14-longest-common-prefix.test.js",
        "file": "\\test\\a14-longest-common-prefix.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "输入[\"flower\",\"flow\",\"flight\"]，应该得到\"fl\"",
            "fullTitle": "寻找最长公共前缀 输入[\"flower\",\"flow\",\"flight\"]，应该得到\"fl\"",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = longestCommonPrefix(['flower','flow','flight']);\nshould(result).be.equal('fl');",
            "err": {},
            "isRoot": false,
            "uuid": "b1d13db4-0aab-4847-93f6-bd6143b0e68d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入[\"dog\",\"racecar\",\"car\"]，应该得到\"\"",
            "fullTitle": "寻找最长公共前缀 输入[\"dog\",\"racecar\",\"car\"]，应该得到\"\"",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = longestCommonPrefix(['dog','racecar','car']);\nshould(result).be.equal('');",
            "err": {},
            "isRoot": false,
            "uuid": "df978544-fd4a-4a08-ae99-d14799b425f9",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b1d13db4-0aab-4847-93f6-bd6143b0e68d",
          "df978544-fd4a-4a08-ae99-d14799b425f9"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ec8208bb-28b8-4fd7-b782-c766ab920642",
        "title": "两数相加测试",
        "fullFile": "D:\\Practice\\happy-leetcode\\test\\a2-add-two-numbers.test.js",
        "file": "\\test\\a2-add-two-numbers.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "输入l1: 2->4->3, l2: 5->6->4，应该得到 7->0->8 ",
            "fullTitle": "两数相加测试 输入l1: 2->4->3, l2: 5->6->4，应该得到 7->0->8 ",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input1 = {\n  val: 2,\n  next: {\n    val: 4,\n    next: {\n      val: 3,\n      next: null\n    }\n  }\n};\nconst input2 = {\n  val: 5,\n  next: {\n    val: 6,\n    next: {\n      val: 4,\n      next: null\n    }\n  }\n};\nlet result = addTwoNumbers(input1, input2);\nshould(result instanceof ListNode).be.eql(true);\nresult = JSON.stringify(result);\nshould(result).be.eql(JSON.stringify({\n  val: 7,\n  next: {\n    val: 0,\n    next: {\n      val: 8,\n      next: null\n    }\n  }\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "4a0aaea2-43da-40a5-a2ad-043a496a8f18",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入l1: 0->1, l2: 0->1->2，应该得到 0->2->2",
            "fullTitle": "两数相加测试 输入l1: 0->1, l2: 0->1->2，应该得到 0->2->2",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input1 = {\n  val: 0,\n  next: {\n    val: 1,\n    next: null\n  }\n};\nconst input2 = {\n  val: 0,\n  next: {\n    val: 1,\n    next: {\n      val: 2,\n      next: null\n    }\n  }\n};\nlet result = addTwoNumbers(input1, input2);\nshould(result instanceof ListNode).be.eql(true);\nresult = JSON.stringify(result);\nshould(result).be.eql(JSON.stringify({\n  val: 0,\n  next: {\n    val: 2,\n    next: {\n      val: 2,\n      next: null\n    }\n  }\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "aa55b660-9c2a-47b7-ab70-cfae83dc4d47",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入l1: null, l2: 0->1，应该得到 0->1",
            "fullTitle": "两数相加测试 输入l1: null, l2: 0->1，应该得到 0->1",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input1 = null;\nconst input2 = {\n  val: 0,\n  next: {\n    val: 1,\n    next: null\n  }\n};\nlet result = addTwoNumbers(input1, input2);\nshould(result instanceof ListNode).be.eql(true);\nresult = JSON.stringify(result);\nshould(result).be.eql(JSON.stringify({\n  val: 0,\n  next: {\n    val: 1,\n    next: null\n  }\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "636a6ad5-d830-4834-80bb-6b7ebab608b8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入l1: 9->9, l2: 1，应该得到 0->0->1",
            "fullTitle": "两数相加测试 输入l1: 9->9, l2: 1，应该得到 0->0->1",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input1 = {\n  val: 9,\n  next: {\n    val: 9,\n    next: null\n  }\n};\nconst input2 = {\n  val: 1,\n  next: null\n};\nlet result = addTwoNumbers(input1, input2);\nshould(result instanceof ListNode).be.eql(true);\nresult = JSON.stringify(result);\nshould(result).be.eql(JSON.stringify({\n  val: 0,\n  next: {\n    val: 0,\n    next: {\n      val: 1,\n      next: null\n    }\n  }\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "6b76466d-5f2f-4d04-8b73-bd0c167383b0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4a0aaea2-43da-40a5-a2ad-043a496a8f18",
          "aa55b660-9c2a-47b7-ab70-cfae83dc4d47",
          "636a6ad5-d830-4834-80bb-6b7ebab608b8",
          "6b76466d-5f2f-4d04-8b73-bd0c167383b0"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b0984558-7292-40fd-a5a5-d0625bf33128",
        "title": "括号配对测试",
        "fullFile": "D:\\Practice\\happy-leetcode\\test\\a20-valid-parentheses.test.js",
        "file": "\\test\\a20-valid-parentheses.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "输入\"{()[{}]}\"，应该得到true",
            "fullTitle": "括号配对测试 输入\"{()[{}]}\"，应该得到true",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input = '{()[{}]}';\nconst result = isValid(input);\nshould(result).be.eql(true);",
            "err": {},
            "isRoot": false,
            "uuid": "650c9ccb-7965-4ade-bc2f-1833b8bbe084",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入\"[{(})]\"，应该得到false",
            "fullTitle": "括号配对测试 输入\"[{(})]\"，应该得到false",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input = '[{(})]';\nconst result = isValid(input);\nshould(result).be.eql(false);",
            "err": {},
            "isRoot": false,
            "uuid": "f297d921-65c2-44bd-b672-bffd11ebe176",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "650c9ccb-7965-4ade-bc2f-1833b8bbe084",
          "f297d921-65c2-44bd-b672-bffd11ebe176"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9aa2f1a0-13cb-41d8-a22a-29293386b4b5",
        "title": "是否正确翻转整数",
        "fullFile": "D:\\Practice\\happy-leetcode\\test\\a7-reverse-integer.test.js",
        "file": "\\test\\a7-reverse-integer.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "输入123，应该得到321",
            "fullTitle": "是否正确翻转整数 输入123，应该得到321",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = reverse(123);\nshould(result).be.equal(321);",
            "err": {},
            "isRoot": false,
            "uuid": "55134883-44a2-4e40-810a-534783cadd89",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入-123，应该得到-321",
            "fullTitle": "是否正确翻转整数 输入-123，应该得到-321",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = reverse(-123);\nshould(result).be.equal(-321);",
            "err": {},
            "isRoot": false,
            "uuid": "5b962ff1-4920-409f-b17a-f1c63ba371b3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入120，应该得到21",
            "fullTitle": "是否正确翻转整数 输入120，应该得到21",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = reverse(120);\nshould(result).be.equal(21);",
            "err": {},
            "isRoot": false,
            "uuid": "2775b58a-2c4c-494f-9c36-2363463c4224",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入1534236469，应该得到0",
            "fullTitle": "是否正确翻转整数 输入1534236469，应该得到0",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = reverse(1534236469);\nshould(result).be.equal(0);",
            "err": {},
            "isRoot": false,
            "uuid": "ed4c78b8-e394-481a-9833-0a73ba6f8dc8",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "55134883-44a2-4e40-810a-534783cadd89",
          "5b962ff1-4920-409f-b17a-f1c63ba371b3",
          "2775b58a-2c4c-494f-9c36-2363463c4224",
          "ed4c78b8-e394-481a-9833-0a73ba6f8dc8"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 3,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2c4bc327-bb34-4037-be60-a89d938a2b38",
        "title": "是否是回文数",
        "fullFile": "D:\\Practice\\happy-leetcode\\test\\a9-palindrome-number.test.js",
        "file": "\\test\\a9-palindrome-number.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "输入121，应该得到true",
            "fullTitle": "是否是回文数 输入121，应该得到true",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = isPalindrome(121);\nshould(result).be.equal(true);",
            "err": {},
            "isRoot": false,
            "uuid": "c5549c1d-a8dd-4ffc-a558-0b3a257a8659",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入-121，应该得到false",
            "fullTitle": "是否是回文数 输入-121，应该得到false",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = isPalindrome(-121);\nshould(result).be.equal(false);",
            "err": {},
            "isRoot": false,
            "uuid": "69f3fa31-3be2-4deb-92c5-6b19b4b75594",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入10，应该得到false",
            "fullTitle": "是否是回文数 输入10，应该得到false",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = isPalindrome(10);\nshould(result).be.equal(false);",
            "err": {},
            "isRoot": false,
            "uuid": "40ed672d-70e3-4c62-98b5-0b965a73a75e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c5549c1d-a8dd-4ffc-a558-0b3a257a8659",
          "69f3fa31-3be2-4deb-92c5-6b19b4b75594",
          "40ed672d-70e3-4c62-98b5-0b965a73a75e"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}