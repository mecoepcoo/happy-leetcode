{
  "stats": {
    "suites": 8,
    "tests": 25,
    "passes": 25,
    "pending": 0,
    "failures": 0,
    "start": "2018-11-01T08:31:07.055Z",
    "end": "2018-11-01T08:31:07.079Z",
    "duration": 24,
    "testsRegistered": 25,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "0fd9791a-3627-49ec-acbe-cc4af743fdc7",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "6836c314-c72a-4281-a760-d16c2dff91a0",
        "title": "两数之和测试",
        "fullFile": "D:\\Practice\\happy-leetcode\\test\\a1-50\\a1-two-sum.test.js",
        "file": "\\test\\a1-50\\a1-two-sum.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "输入[5, 6, 13, 15]， 17，应该得到[]",
            "fullTitle": "两数之和测试 输入[5, 6, 13, 15]， 17，应该得到[]",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input = [5, 6, 13, 15];\nconst result = twoSum(input, 17);\nshould(result).be.eql([]);",
            "err": {},
            "isRoot": false,
            "uuid": "765524ab-3311-4537-8ac2-9ca94886f4b5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入[5, 6, 13, 15]， 19，应该得到[1, 2]",
            "fullTitle": "两数之和测试 输入[5, 6, 13, 15]， 19，应该得到[1, 2]",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input = [5, 6, 13, 15];\nconst result = twoSum(input, 19);\nshould(result).be.eql([1, 2]);",
            "err": {},
            "isRoot": false,
            "uuid": "0a157f69-2d08-4524-992b-c78a3bd2784f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "765524ab-3311-4537-8ac2-9ca94886f4b5",
          "0a157f69-2d08-4524-992b-c78a3bd2784f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "ac583464-074b-4879-b542-5a2eaa106484",
        "title": "罗马数字转换为整数",
        "fullFile": "D:\\Practice\\happy-leetcode\\test\\a1-50\\a13-roman-to-integer.test.js",
        "file": "\\test\\a1-50\\a13-roman-to-integer.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "输入III，应该得到3",
            "fullTitle": "罗马数字转换为整数 输入III，应该得到3",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = romanToInt('III');\nshould(result).be.equal(3);",
            "err": {},
            "isRoot": false,
            "uuid": "4d2176b4-bad8-45c3-9fb9-3dd3c42a73cd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入IV，应该得到4",
            "fullTitle": "罗马数字转换为整数 输入IV，应该得到4",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = romanToInt('IV');\nshould(result).be.equal(4);",
            "err": {},
            "isRoot": false,
            "uuid": "b43b34ec-5205-479e-a612-a8268b41aac1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入IX，应该得到9",
            "fullTitle": "罗马数字转换为整数 输入IX，应该得到9",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = romanToInt('IX');\nshould(result).be.equal(9);",
            "err": {},
            "isRoot": false,
            "uuid": "48e216b7-22dc-4a50-a1d7-276475b478e8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入LVIII，应该得到58",
            "fullTitle": "罗马数字转换为整数 输入LVIII，应该得到58",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = romanToInt('LVIII');\nshould(result).be.equal(58);",
            "err": {},
            "isRoot": false,
            "uuid": "19ae50fa-789a-4c40-afa2-4c70093dff72",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入MCMXCIV，应该得到1994",
            "fullTitle": "罗马数字转换为整数 输入MCMXCIV，应该得到1994",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = romanToInt('MCMXCIV');\nshould(result).be.equal(1994);",
            "err": {},
            "isRoot": false,
            "uuid": "bec10d26-a64c-4bdb-b8d3-ead3257e9c0a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4d2176b4-bad8-45c3-9fb9-3dd3c42a73cd",
          "b43b34ec-5205-479e-a612-a8268b41aac1",
          "48e216b7-22dc-4a50-a1d7-276475b478e8",
          "19ae50fa-789a-4c40-afa2-4c70093dff72",
          "bec10d26-a64c-4bdb-b8d3-ead3257e9c0a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "079fe3c3-ccba-4220-890a-cd5a355d23a7",
        "title": "寻找最长公共前缀",
        "fullFile": "D:\\Practice\\happy-leetcode\\test\\a1-50\\a14-longest-common-prefix.test.js",
        "file": "\\test\\a1-50\\a14-longest-common-prefix.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "输入[\"flower\",\"flow\",\"flight\"]，应该得到\"fl\"",
            "fullTitle": "寻找最长公共前缀 输入[\"flower\",\"flow\",\"flight\"]，应该得到\"fl\"",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = longestCommonPrefix(['flower','flow','flight']);\nshould(result).be.equal('fl');",
            "err": {},
            "isRoot": false,
            "uuid": "31c73e31-8bb6-4572-b9a4-975769a197ec",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入[\"dog\",\"racecar\",\"car\"]，应该得到\"\"",
            "fullTitle": "寻找最长公共前缀 输入[\"dog\",\"racecar\",\"car\"]，应该得到\"\"",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = longestCommonPrefix(['dog','racecar','car']);\nshould(result).be.equal('');",
            "err": {},
            "isRoot": false,
            "uuid": "cd8d70b8-3f76-4bd7-9400-29f4bb88064d",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "31c73e31-8bb6-4572-b9a4-975769a197ec",
          "cd8d70b8-3f76-4bd7-9400-29f4bb88064d"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a8c23d18-a28e-42d7-8d87-fb307f6148b4",
        "title": "两数相加测试",
        "fullFile": "D:\\Practice\\happy-leetcode\\test\\a1-50\\a2-add-two-numbers.test.js",
        "file": "\\test\\a1-50\\a2-add-two-numbers.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "输入l1: 2->4->3, l2: 5->6->4，应该得到 7->0->8 ",
            "fullTitle": "两数相加测试 输入l1: 2->4->3, l2: 5->6->4，应该得到 7->0->8 ",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input1 = {\n  val: 2,\n  next: {\n    val: 4,\n    next: {\n      val: 3,\n      next: null\n    }\n  }\n};\nconst input2 = {\n  val: 5,\n  next: {\n    val: 6,\n    next: {\n      val: 4,\n      next: null\n    }\n  }\n};\nlet result = addTwoNumbers(input1, input2);\nshould(result instanceof ListNode).be.eql(true);\nresult = JSON.stringify(result);\nshould(result).be.eql(JSON.stringify({\n  val: 7,\n  next: {\n    val: 0,\n    next: {\n      val: 8,\n      next: null\n    }\n  }\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "baa9a9f1-6cac-479d-8392-d1718ca4f3a4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入l1: 0->1, l2: 0->1->2，应该得到 0->2->2",
            "fullTitle": "两数相加测试 输入l1: 0->1, l2: 0->1->2，应该得到 0->2->2",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input1 = {\n  val: 0,\n  next: {\n    val: 1,\n    next: null\n  }\n};\nconst input2 = {\n  val: 0,\n  next: {\n    val: 1,\n    next: {\n      val: 2,\n      next: null\n    }\n  }\n};\nlet result = addTwoNumbers(input1, input2);\nshould(result instanceof ListNode).be.eql(true);\nresult = JSON.stringify(result);\nshould(result).be.eql(JSON.stringify({\n  val: 0,\n  next: {\n    val: 2,\n    next: {\n      val: 2,\n      next: null\n    }\n  }\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "3f8744ee-507a-4ec3-9a6d-45e9694d341b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入l1: null, l2: 0->1，应该得到 0->1",
            "fullTitle": "两数相加测试 输入l1: null, l2: 0->1，应该得到 0->1",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input1 = null;\nconst input2 = {\n  val: 0,\n  next: {\n    val: 1,\n    next: null\n  }\n};\nlet result = addTwoNumbers(input1, input2);\nshould(result instanceof ListNode).be.eql(true);\nresult = JSON.stringify(result);\nshould(result).be.eql(JSON.stringify({\n  val: 0,\n  next: {\n    val: 1,\n    next: null\n  }\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "147a5f2e-b3b8-411a-a8f5-13745cdc6a24",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入l1: 9->9, l2: 1，应该得到 0->0->1",
            "fullTitle": "两数相加测试 输入l1: 9->9, l2: 1，应该得到 0->0->1",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input1 = {\n  val: 9,\n  next: {\n    val: 9,\n    next: null\n  }\n};\nconst input2 = {\n  val: 1,\n  next: null\n};\nlet result = addTwoNumbers(input1, input2);\nshould(result instanceof ListNode).be.eql(true);\nresult = JSON.stringify(result);\nshould(result).be.eql(JSON.stringify({\n  val: 0,\n  next: {\n    val: 0,\n    next: {\n      val: 1,\n      next: null\n    }\n  }\n}));",
            "err": {},
            "isRoot": false,
            "uuid": "f533f87d-e8d4-4289-b04d-16296bbb4dc3",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "baa9a9f1-6cac-479d-8392-d1718ca4f3a4",
          "3f8744ee-507a-4ec3-9a6d-45e9694d341b",
          "147a5f2e-b3b8-411a-a8f5-13745cdc6a24",
          "f533f87d-e8d4-4289-b04d-16296bbb4dc3"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "417121f2-d1d6-4f5a-b912-0ca1da6bb76f",
        "title": "括号配对测试",
        "fullFile": "D:\\Practice\\happy-leetcode\\test\\a1-50\\a20-valid-parentheses.test.js",
        "file": "\\test\\a1-50\\a20-valid-parentheses.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "输入\"{()[{}]}\"，应该得到true",
            "fullTitle": "括号配对测试 输入\"{()[{}]}\"，应该得到true",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input = '{()[{}]}';\nconst result = isValid(input);\nshould(result).be.eql(true);",
            "err": {},
            "isRoot": false,
            "uuid": "a30ed413-5533-43c9-984f-beca426b0dd0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入\"[{(})]\"，应该得到false",
            "fullTitle": "括号配对测试 输入\"[{(})]\"，应该得到false",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input = '[{(})]';\nconst result = isValid(input);\nshould(result).be.eql(false);",
            "err": {},
            "isRoot": false,
            "uuid": "29f5a9c9-22c5-4192-879e-b7eaf5a43dab",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "a30ed413-5533-43c9-984f-beca426b0dd0",
          "29f5a9c9-22c5-4192-879e-b7eaf5a43dab"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "077ff1fd-f09a-420b-9017-8324d00f94f1",
        "title": "无重复字符的最长子串测试",
        "fullFile": "D:\\Practice\\happy-leetcode\\test\\a1-50\\a3-longest-substring-without-repeating-characters.test.js",
        "file": "\\test\\a1-50\\a3-longest-substring-without-repeating-characters.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "输入abcabcbb，应该得到abc",
            "fullTitle": "无重复字符的最长子串测试 输入abcabcbb，应该得到abc",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input = 'abcabcbb';\nconst result = lengthOfLongestSubstring(input);\nshould(result).be.eql(3);",
            "err": {},
            "isRoot": false,
            "uuid": "52e6a7db-059e-4c1c-b870-812db9601839",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入bbbbbb，应该得到b",
            "fullTitle": "无重复字符的最长子串测试 输入bbbbbb，应该得到b",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input = 'bbbbbb';\nconst result = lengthOfLongestSubstring(input);\nshould(result).be.eql(1);",
            "err": {},
            "isRoot": false,
            "uuid": "57632bc9-8e9c-4b12-bc15-db83fac39523",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入pwwkew，应该得到wke",
            "fullTitle": "无重复字符的最长子串测试 输入pwwkew，应该得到wke",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const input = 'pwwkew';\nconst result = lengthOfLongestSubstring(input);\nshould(result).be.eql(3);",
            "err": {},
            "isRoot": false,
            "uuid": "e2d945f3-6714-4015-90e8-14614c4af3a5",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "52e6a7db-059e-4c1c-b870-812db9601839",
          "57632bc9-8e9c-4b12-bc15-db83fac39523",
          "e2d945f3-6714-4015-90e8-14614c4af3a5"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9d027472-5781-4726-9b6f-233bca2c5dc4",
        "title": "是否正确翻转整数",
        "fullFile": "D:\\Practice\\happy-leetcode\\test\\a1-50\\a7-reverse-integer.test.js",
        "file": "\\test\\a1-50\\a7-reverse-integer.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "输入123，应该得到321",
            "fullTitle": "是否正确翻转整数 输入123，应该得到321",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = reverse(123);\nshould(result).be.equal(321);",
            "err": {},
            "isRoot": false,
            "uuid": "182ab1de-cc21-4a5a-bf08-85dd0aeb51a8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入-123，应该得到-321",
            "fullTitle": "是否正确翻转整数 输入-123，应该得到-321",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = reverse(-123);\nshould(result).be.equal(-321);",
            "err": {},
            "isRoot": false,
            "uuid": "a1186e01-2a9f-4f77-a06b-4879555d8350",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入120，应该得到21",
            "fullTitle": "是否正确翻转整数 输入120，应该得到21",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = reverse(120);\nshould(result).be.equal(21);",
            "err": {},
            "isRoot": false,
            "uuid": "b060f833-ae97-4107-8db6-5cdddf9bb402",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入1534236469，应该得到0",
            "fullTitle": "是否正确翻转整数 输入1534236469，应该得到0",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = reverse(1534236469);\nshould(result).be.equal(0);",
            "err": {},
            "isRoot": false,
            "uuid": "8da78ffd-53fb-4430-aded-196e582e650d",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "182ab1de-cc21-4a5a-bf08-85dd0aeb51a8",
          "a1186e01-2a9f-4f77-a06b-4879555d8350",
          "b060f833-ae97-4107-8db6-5cdddf9bb402",
          "8da78ffd-53fb-4430-aded-196e582e650d"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8f759a5c-8d7d-437c-bd1c-7ea6ca6a0334",
        "title": "是否是回文数",
        "fullFile": "D:\\Practice\\happy-leetcode\\test\\a1-50\\a9-palindrome-number.test.js",
        "file": "\\test\\a1-50\\a9-palindrome-number.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "输入121，应该得到true",
            "fullTitle": "是否是回文数 输入121，应该得到true",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = isPalindrome(121);\nshould(result).be.equal(true);",
            "err": {},
            "isRoot": false,
            "uuid": "2bca81c3-d059-4874-8ff6-15ae70af761a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入-121，应该得到false",
            "fullTitle": "是否是回文数 输入-121，应该得到false",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = isPalindrome(-121);\nshould(result).be.equal(false);",
            "err": {},
            "isRoot": false,
            "uuid": "b49a4851-66bd-443a-9f40-7d3b2d4471b0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "输入10，应该得到false",
            "fullTitle": "是否是回文数 输入10，应该得到false",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const result = isPalindrome(10);\nshould(result).be.equal(false);",
            "err": {},
            "isRoot": false,
            "uuid": "5a24a00b-5054-4f34-928a-0e36c206cb4f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "2bca81c3-d059-4874-8ff6-15ae70af761a",
          "b49a4851-66bd-443a-9f40-7d3b2d4471b0",
          "5a24a00b-5054-4f34-928a-0e36c206cb4f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}